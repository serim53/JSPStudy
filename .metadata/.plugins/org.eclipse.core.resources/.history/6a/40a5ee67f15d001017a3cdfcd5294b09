package com.multicampus.web;

import java.io.IOException;
import java.util.List;

import com.multicampus.biz.board.BoardDAO;
import com.multicampus.biz.board.BoardVO;
import com.multicampus.biz.user.UserDAO;
import com.multicampus.biz.user.UserVO;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet(urlPatterns = { "*.do" })
public class DispatcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 1. 브라우저의 요청 path 정보를 추출한다.
		String uri = request.getRequestURI();
		String path = uri.substring(uri.lastIndexOf("/"));
		System.out.println(path);
		
		// 2. 추출된 path에 따라 로직을 분기처리한다.
		if(path.equals("/login.do")) {
			System.out.println("로그인 기능 처리");
			
			// 1. 사용자 입력정보 추출
			String id = request.getParameter("id");
			String password = request.getParameter("password");
			
			// 2. DB 연동 처리
			UserVO vo = new UserVO();
			vo.setId(id);
			vo.setPassword(password);
			
			UserDAO dao = new UserDAO();
			UserVO user = dao.getUser(vo);
			
			// 3. 화면 이동	
			if(user != null) {
				// 로그인 성공
				HttpSession session = request.getSession();
				session.setAttribute("user", user);
				response.sendRedirect("getBoardList.do");
			} else {
				// 로그인 실패
				response.sendRedirect("/WEB-INF/board/login.jsp");
			}
		} else if(path.equals("/logout.do")) {
			System.out.println("로그아웃 기능 처리");
			//로그아웃을 요청한 브라우저와 매핑된 세션을 강제로 종료한다.
			HttpSession session = request.getSession();
			session.invalidate();
			
			// 화면 이동
			response.sendRedirect("/");
		} else if(path.equals("/insertBoard.do")) {
			System.out.println("글 등록 기능 처리");
			//1. 사용자 입력정보 추출
			String title = request.getParameter("title");
			String writer = request.getParameter("writer");
			String content = request.getParameter("content");
			
			// 2. DB 연동 처리
			BoardVO vo = new BoardVO();
			vo.setTitle(title);
			vo.setWriter(writer);
			vo.setContent(content);
			
			BoardDAO dao = new BoardDAO();
			dao.insertBoard(vo);
			
			// 3. 화면 이동
			// 등록/수정/삭제에 대해서는 포워드 방식이 아닌 리디렉트 방식을 사용해야 함
			// url 변경이 되지 않아 같은 동작이 계속 반복됨.
			response.sendRedirect("/getBoardList.do");
		} else if(path.equals("/updateBoard.do")) {
			System.out.println("글 수정 기능 처리");
			//1. 사용자 입력정보 추출
			String seq = request.getParameter("seq");
			String title = request.getParameter("title");
			String content = request.getParameter("content");
			
			// 2. DB 연동 처리
			BoardVO vo = new BoardVO();
			vo.setSeq(Integer.parseInt(seq));
			vo.setTitle(title);
			vo.setContent(content);
			
			BoardDAO dao = new BoardDAO();
			dao.updateBoard(vo);
			
			// 3. 화면 이동
			response.sendRedirect("getBoardList.do");
		} else if(path.equals("/deleteBoard.do")) {
			System.out.println("글 삭제 기능 처리");
			//1. 사용자 입력정보 추출
			String seq = request.getParameter("seq");
			
			// 2. DB 연동 처리
			BoardVO vo = new BoardVO();
			vo.setSeq(Integer.parseInt(seq));
			
			BoardDAO dao = new BoardDAO();
			dao.deleteBoard(vo);
			
			// 3. 화면 이동
			response.sendRedirect("getBoardList.do");
		} else if(path.equals("/getBoard.do")) {
			System.out.println("글 상세 조회 기능 처리");
			//1. 사용자 입력정보 추출
			String seq = request.getParameter("seq");

			// 2. DB 연동 처리
			BoardVO vo = new BoardVO();
			vo.setSeq(Integer.parseInt(seq));
			
			BoardDAO dao = new BoardDAO();
			BoardVO board = dao.getBoard(vo);
			
			// 3. Model(DAO)을 통해 검색한 데이터를 View(JSP)에서 사용할 수 있도록 request에 등록한다.
			request.setAttribute("board", board);
			
			// 4. 화면 이동
			RequestDispatcher rd = request.getRequestDispatcher("getBoard.jsp");
			rd.forward(request, response);
		} else if(path.equals("/getBoardList.do")) {
			System.out.println("글 목록 검색 기능 처리");
			// 1. 사용자 입력정보 추출
			String condition = request.getParameter("condition");
			String keyword = request.getParameter("keyword");

			// null check
			if (condition == null) condition = "title";
			if (keyword == null) keyword = "";
			
			request.setAttribute("condition", condition);
			request.setAttribute("keyword", keyword);
			
			// 2. DB 연동 처리
			BoardVO vo = new BoardVO();
			vo.setCondition(condition);
			vo.setKeyword(keyword);
			
			BoardDAO dao = new BoardDAO();
			List<BoardVO> boardList = dao.getBoardList(vo);
			
			// 3. Model(DAO)을 이용하여 검색한 데이터를 View(JSP)에서 사용할 수 있도록 request에 등록한다.
			// 검색 결과는 session이 아닌 request에 저장한다.
			request.setAttribute("boardList", boardList);
			
			// 4. 화면 이동
			RequestDispatcher rd = request.getRequestDispatcher("getBoardList.jsp");
			rd.forward(request, response);
		} else if(path.equals("/insertUser.do")) {
			System.out.println("회원 가입 기능 처리");
			//1. 사용자 입력정보 추출
			String id = request.getParameter("id");
			String password = request.getParameter("password");
			String name = request.getParameter("name");
			String role = request.getParameter("role");
			
			// 2. DB 연동 처리
			UserVO vo = new UserVO();
			vo.setId(id);
			vo.setPassword(password);
			vo.setName(name);
			vo.setRole(role);
			
			UserDAO dao = new UserDAO();
			dao.insertUser(vo);
			
			// 3. 화면 이동
			response.sendRedirect("index.jsp");
		} else if(path.equals("/loginView.do")) {
			System.out.println("로그인 화면으로 이동");
			
			RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/board/login.jsp");
			rd.forward(request, response);
		}
	}
}