package com.multicampus.biz.user;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.multicampus.biz.common.JDBCUtil;

public class InsertUserTest {
	public static void main(String[] args) {

		// JDBC 관련 변수
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			conn = JDBCUtil.getConnection();
			// 3단계 : PreparedStatement 생성
			String sql = "insert into users(id, password, name, role) values(?, ?, ?, ?)";
			stmt = conn.prepareStatement(sql);
			
			// 4단계 : SQL 전송
			// 파라미터(?) 값 설정
			stmt.setString(1, "admin");
			stmt.setString(2, "test112");
			stmt.setString(3, "윤세림");
			stmt.setString(4, "USER");
			int count = stmt.executeUpdate();
			System.out.println(count + "건의 데이터가 처리됨");
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// 5단계 : 연결 해제
			// stmt는 고속버스, conn은 고속도로 => 무조건 stmt를 먼저 close해야한다.
			// stmt.close(); conn.close();를 순서대로 실행한다고 안전하게 연결 해제가 되지 않는 이유는
			// stmt close 도중 에러가 나면 conn.close()는 실행조차 되지 않기 때문이다.
			// connection을 연결하는 것은 굉장히 비싼 작업이므로 close를 무조건 실행할 수 있게 해야한다.
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				stmt = null;
			}
			
			try {
				if (conn != null && !conn.isClosed())
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				conn = null;
			}
		}
	}
}